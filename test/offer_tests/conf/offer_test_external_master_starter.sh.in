#!/bin/bash
# Copyright (C) 2015-2016 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Purpose: This script is needed to start the services with
# one command. This is necessary as ctest - which is used to run the
# tests - isn't able to start multiple binaries for one testcase. Therefore
# the testcase simply executes this script. This script then runs the services
# and checks that all exit successfully.

FAIL=0
# Rejecting offer for which there is already a remote offer:
# * start daemon
# * start application which offers service
# * start daemon remotely
# * start same application which offers the same service again remotely
#   -> should be rejected as there is already a service instance
#   running in the network

# Array for client pids
CLIENT_PIDS=()
export VSOMEIP_CONFIGURATION=offer_test_external_master.json
# start daemon
../daemon/./vsomeipd &
PID_VSOMEIPD=$!
# Start the services
./offer_test_service 2 &
PID_SERVICE_TWO=$!

./offer_test_client SUBSCRIBE &
CLIENT_PIDS+=($!)

sleep 1

cat <<End-of-message
*******************************************************************************
*******************************************************************************
** Please now run:
** offer_test_external_slave_starter.sh
** from an external host to successfully complete this test.
**
** You probably will need to adapt the 'unicast' settings in
** offer_test_external_master.json and
** offer_test_external_slave.json to your personal setup.
*******************************************************************************
*******************************************************************************
End-of-message


# Wait until all clients and services are finished
for job in ${CLIENT_PIDS[*]} $PID_SERVICE_TWO
do
    # Fail gets incremented if a client exits with a non-zero exit code
    wait $job || FAIL=$(($FAIL+1))
done

# kill the services
kill $PID_VSOMEIPD
sleep 1


# Rejecting remote offer for which there is already a local offer
# * start application which offers service
# * send sd message trying to offer the same service instance as already
#   offered locally from a remote host

# Array for client pids
CLIENT_PIDS=()
export VSOMEIP_CONFIGURATION=offer_test_external_master.json
# start daemon
../daemon/./vsomeipd &
PID_VSOMEIPD=$!
# Start the services
./offer_test_service 2 &
PID_SERVICE_TWO=$!

./offer_test_client SUBSCRIBE &
CLIENT_PIDS+=($!)

sleep 1

cat <<End-of-message
*******************************************************************************
*******************************************************************************
** Please now run:
** offer_test_external_sd_msg_sender @TEST_IP_MASTER@
** (pass the correct ip address of your test master)
** from an external host to successfully complete this test.
**
*******************************************************************************
*******************************************************************************
End-of-message

# Wait until all clients and services are finished
for job in ${CLIENT_PIDS[*]} $PID_SERVICE_TWO
do
    # Fail gets incremented if a client exits with a non-zero exit code
    wait $job || FAIL=$(($FAIL+1))
done

# kill the services
kill $PID_VSOMEIPD
sleep 1


# Check if everything went well
if [ $FAIL -eq 0 ]
then
    exit 0
else
    exit 1
fi
